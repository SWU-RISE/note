#+TITLE: My Notebook
#+AUTHOR: Liyun Dai (dailiyun2009@163.com)
#+EMAIL: dailiyun2009@163.com

* Ubuntu connect internet by command
<2018-10-08 一>
1. List all interface command
#+BEGIN_SRC  shell
 ifconfig -a
#+END_SRC

2. Start one interface
#+BEGIN_SRC  shell
sudo ifconfig [eth0] up
#+END_SRC
3. Close one interface 
#+BEGIN_SRC  shell
sudo ifconfig [eth0] down
#+END_SRC
4. Scan all available wifi 
#+BEGIN_SRC  shell
sudo iw dev [wlan0] scan | less
#+END_SRC
5. Connect a wifi without password 
#+BEGIN_SRC  shell
sudo iw dev [wlan0] connect [ssid]
#+END_SRC

6. Connect a wifi with WEP mode password  
#+BEGIN_SRC  shell
sudo iw dev [wlan0]  key 0:[password]
#+END_SRC
7. Connect a widi with WAP mode password 
  + Generate wap config file 
   #+BEGIN_SRC  shell
   wpa_passphrase [ssid] [password] > wpa.conf
   #+END_SRC
  + Connect internet 
   #+BEGIN_SRC  shell
   wpa_supplicant -i [wlan0] -B -c ./wpa.conf
   #+END_SRC
  + Obtain ip adress
   #+BEGIN_SRC  shell
   dhclient [wlan0]
   #+END_SRC



* Reading books
** Begining Linux Programming 4th Edition
<2018-10-08 一>
*** Getting Started
UNIX Philosophy
+ Simplicity
+ Focus
+ Resuable Components
+ Filters

+ Open File Formats
Util envoroment variables
+ Execute search paths PATH
   #+BEGIN_SRC  sh :results output
echo $PATH
   #+END_SRC

   #+RESULTS:
   : /home/yun/bin:/home/yun/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/home/yun/bin:/home/yun/jdk1.8.0_181/bin

+ Generate static link lib
  #+BEGIN_SRC  sh :results output
ar crv libfoo.a bill.o fred.o
randlib libfoo.a
  #+END_SRC

*** Shell Programming
1. If you prefer to capture both sets of output into a single file, you can use the >& operator to combine the
two outputs. Therefore,
  #+BEGIN_SRC  sh :results output
kill -HUP 1234 >killout.txt 2>killerr.txt
  #+END_SRC


2. If you prefer to capture both sets of output into a single file, you can use the >& operator to combine the
two outputs. Therefore,
  #+BEGIN_SRC  sh :results output
kill -1 1234 >killouterr.txt 2>&1
  #+END_SRC

3. Useful Environment variable
+ $0 The name of the shell script
+ $# The number of parameters passed
+ \$ \$ The process ID of the shell script, often used inside a script for generating unique temporary filenames; for example /tmp/tmpfile_$$

4. That looks good, except that you also find the current directory, which you didn’t want. You were inter-
ested only in regular files, so you add an additional test , -type f :
  #+BEGIN_SRC  sh :results output
find . -newer while2 -type f 
  #+END_SRC

5. Now find files that either start with an underscore or are newer than the file while2 , but must in either
case be regular files. This will show you how to combine tests using parentheses:

  #+BEGIN_SRC  sh :results output
find . \( -name “_*“ -or -newer while2 \) -type f
  #+END_SRC

*** Working with Files

** Linux kernel source code read 0.11
<2018-10-08 一>

** Reading Computer Architecture (A Quantitiative Approach) John L. Hennessy


** Android in Action


** Decision Procedures (Second Edition)
   Satisfiability Modulo Theories -> SMT
   propositional logic -> 命题逻辑
<2018-10-19 五>
***   Chapter1 Introduction and Basic Concepts

      + Deduction :: using inference rules (proof-theoretic)
      + Enumeration :: using search based method
      + Soundness of a procedure :: A procedure for a decision problem is sound if, when it returns “Valid”, the input formula is valid.
      + Completeness of a procedure :: A procedure for a decision problem is complete if
           + it always terminates, and
           + it returns “Valid” when the input formula is valid.           
      + Decision procedure :: A procedure is called a decision procedure for T if it is sound and complete with respect to every formula of T .
      + Decidability of a theory :: A theory is decidable if and only if there is a decision procedure for it.
      

        *When there is no way to predict the relative performance of procedures without actually running them, they can be run in parallel, with a “first-to-end kills all others” policy. This is a common practice in industry.*

        + De Morgan’s rules ::
<2018-10-20 六>


#+BEGIN_LATEX
\begin{align}
\neg (a\vee b) \equiv (\neg a \wedge \neg b)\\
\neg (a \wedge b) \equiv (\neg a \vee \neg b)
\end{align}
#+END_LATEX
        + Literal :: A literal is either an atom or its negation.

        Every formula with a Boolean structure can be transformed into DNF, while potentially increasing the size of the formula exponentially.




** Network Flows Theory Algorithms and Applications
   If you would not be forgotten, As soon as you are dead and rotten, Either write things worthy reading, Or do things worth the writting. --Beniamin Franklin



* linux util
** ssh login with out password
<2018-10-11 四>
There are two PCs A and  B. B wants to login in A without
password throud ssh 
1. Run following command on B 
   #+BEGIN_SRC  shell
 ssh-keygen -t rsa -P ''
   #+END_SRC
2. Copy the key of B to A
 +   Genertate ssh key
  #+BEGIN_SRC  shell
 scp ~/.ssh/id_rsa.pub  [usr]@[A ip]:~/
   #+END_SRC
 + Add B's ssh key to authorized_keys on A
  #+BEGIN_SRC  shell
 cat id_rsa.pub >> .ssh/authorized_keys
  #+END_SRC


** linux如何查看端口被哪个进程占用的方法
   +
      #+BEGIN_SRC  shell 
   lsof -i:端口号
      #+END_SRC

   +
      #+BEGIN_SRC  shell 
      netstat -tunlp|grep 端口号
      #+END_SRC
**  docker：搭建lamp应用
    + 
       #+BEGIN_SRC  shell 
       docker pull tutum/lamp
       #+END_SRC
    + Start
       #+BEGIN_SRC  shell 
       docker run -d -p 8080:80 -p 3306:3306 tutum/lamp
       #+END_SRC
    + Check docker log
       #+BEGIN_SRC  shell 
       docker logs [容器ID]
       #+END_SRC
[[https://blog.csdn.net/smallfish1983/article/details/40108999][   Blog ]]
** docker 进入airline 的方法
       #+BEGIN_SRC  shell 
       docker exec -it [imageID] sh
       #+END_SRC
** docker airline 下安装程序的命令
       #+BEGIN_SRC  shell 
       apk add [package]
       #+END_SRC
** docker：搭建lamp应用
       + 从网站上 pull 一个 lamp 镜像 ::
       #+BEGIN_SRC  shell 
       docker pull tutum/lamp
       #+END_SRC

       + 使用默认方式启动 lamp 容器 ::
       #+BEGIN_SRC  shell 
       docker run -d -p 8080:80 -p 3306:3306 tutum/lamp
       #+END_SRC

       + 部署自己的 PHP 应用 ::
       #+BEGIN_SRC  shell 
       mkdir php
       touch Dockerfile
       vi Dockerfile
       docker build -t dockerpool/my-lamp-app .
       #+END_SRC
       Dockerfile 内容如下：
       [[./Dockerfile][Dockerfile]]

       + 再次启动自己的容器就完成部署了 ::
       #+BEGIN_SRC  shell 
       docker stop [tutum/lamp ID]
       docker rm [tutum/lamp ID]
       docker run -d -p 8080:80 -p 3306:3306 dockerpool/my-lamp-app
       #+END_SRC
       
       + 查看容器的log
       #+BEGIN_SRC  shell 
        docker logs [容器ID]
       #+END_SRC
[[https://blog.csdn.net/smallfish1983/article/details/40108999][Blog]]
** linux 定时任务

      + 编辑crontab服务文件 ::
       #+BEGIN_SRC  shell 
       crontab  -u [user] -e 
      #+END_SRC
      + 查看该用户下的crontab服务是否创建成功 ::
      #+BEGIN_SRC  shell 
      crontab -u [user] -l
      #+END_SRC
      +  启动crontab服务  ::
                  -         
                 #+BEGIN_SRC  shell 
                    /sbin/service crond start
                 #+END_SRC
                 - 或者是
                 #+BEGIN_SRC  shell 
                    sudo service crond start
                 #+END_SRC
      +  查看服务是否已经运行用 ::
                 #+BEGIN_SRC  shell 
                     ps -ax | grep cron 
                 #+END_SRC

[[http://blogjava.net/freeman1984/archive/2010/09/23/332715.html][参考]]


* English paper common wrong usage

   + +In section+ ->  In Section
   + +at the begining+ -> in the begining 
   + +an univariate polynomial+ -> a univariate polynomial
   + +By assumption xxx+ -> By assumption, xxx
   + +I.e+ -> I.e.,  



* Java non-static inner class has implict reference for outer class
**  http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2014/1106/1922.html
** https://blog.csdn.net/zmx729618/article/details/54093532


* Online JudgeMent seminar
** Tingtine Test online editor
<2018-10-15 一>
+ Test id not start 1
+ Choice test want to inset figure 
+ flush to save to data
+ settting point for evert test
** xuelian
+ Lige abstact syntax tree (AST)
+ Data-inconsistent Java


* Online Table Project
** Server build
*** Ubuntu 16.04
<2018-10-16 二>
    1. Setup apache2
    #+BEGIN_SRC  shell
     sudo apt-get install apache2
     sudo /etc/init.d/apache2 restart
    #+END_SRC 
    2. Setup php7
    #+BEGIN_SRC  shell
     sudo apt-get install libapache2-mod-php7.0 php7.0 php7.0-gd php7.0-mysql
     sudo /etc/init.d/apache2 restart
    #+END_SRC 

    3. Setup mysql
    #+BEGIN_SRC  shell
    sudo apt install mysql-server php7.0-mysql
    sudo apt-get install mysql-client
    sudo /etc/init.d/apache2 restart
    #+END_SRC 

    4. 安装phpmyadmin

    #+BEGIN_SRC  shell
     sudo apt-get install phpmyadmin
     sudo apt-get install php-mbstring
     sudo apt-get install php-gettext
     sudo ln -s /usr/share/phpmyadmin /var/www/html/phpmyadmin
    #+END_SRC 

    5. 配置phpmyadmin
    #+BEGIN_SRC  shell
    sudo emacs /etc/php/7.0/apache2/php.ini
    #+END_SRC 
    display_errors = On(显示错误日志，出现两次，都要改，不然无效)
    extension=php_mbstring.dll (开启mbstring)





*



